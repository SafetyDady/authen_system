// Dashboard JavaScript
let currentUser = null;
let currentSection = 'overview';

// Initialize Dashboard
document.addEventListener('DOMContentLoaded', async function() {
    console.log('Dashboard initialization started');
    
    // Show loading indicator
    showLoadingIndicator();
    
    try {
        // Get token from localStorage
        const token = localStorage.getItem('access_token');
        const cachedUserData = localStorage.getItem('user_data');
        
        if (!token) {
            // No token, redirect to login
            console.log('No token found, redirecting to login');
            window.location.href = 'index.html';
            return;
        }
        
        // Use cached user data first (for faster loading)
        if (cachedUserData) {
            try {
                currentUser = JSON.parse(cachedUserData);
                console.log('Using cached user data:', currentUser);
            } catch (e) {
                console.error('Error parsing cached user data:', e);
                currentUser = null;
            }
        }
        
        // If no cached data, set default user
        if (!currentUser) {
            currentUser = {
                first_name: 'User',
                last_name: '',
                email: 'user@example.com',
                role: 'user'
            };
            console.log('Using default user data');
        }
        
        // Setup event listeners
        setupEventListeners();
        
        // Update UI with user data (no API call needed)
        updateUserInfo();
        generateNavigation();
        loadDashboardContent();
        
        // Start real-time updates
        startRealTimeUpdates();
        
        // Try to validate token in background (non-blocking)
        validateTokenInBackground();
        
        console.log('Dashboard initialization completed successfully');
        
    } catch (error) {
        console.error('Dashboard initialization error:', error);
        
        // Show error but don't redirect - try to continue with cached data
        const content = document.getElementById('content');
        if (content) {
            content.innerHTML = `
                <div class="content-section">
                    <h2>เกิดข้อผิดพลาด</h2>
                    <p>ไม่สามารถโหลดข้อมูลได้ แต่คุณสามารถใช้งานต่อได้</p>
                </div>
            `;
        }
    } finally {
        // Hide loading indicator
        hideLoadingIndicator();
    }
});

// Validate token in background (non-blocking)
async function validateTokenInBackground() {
    try {
        const token = localStorage.getItem('access_token');
        if (!token) return;
        
        const response = await fetch('http://127.0.0.1:8000/api/v1/auth/me', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            // Token is valid, update user data
            const userData = await response.json();
            currentUser = userData;
            localStorage.setItem('user_data', JSON.stringify(userData));
            
            // Update UI with fresh data
            updateUserInfo();
            console.log('Token validated successfully, user data updated');
        } else {
            // Token invalid, but don't redirect - just log
            console.warn('Token validation failed, but continuing with cached data');
        }
        
    } catch (error) {
        console.warn('Token validation error (background):', error);
        // Don't do anything - just continue with cached data
    }
}

// Check Authentication and Get User Data (Combined function)
async function checkAuthenticationAndGetUser() {
    const token = localStorage.getItem('access_token');
    if (!token) {
        window.location.href = 'index.html';
        return null;
    }
    
    try {
        // Validate token and get user data in one API call
        const response = await fetch('http://127.0.0.1:8000/api/v1/auth/me', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            // Token invalid, clear storage and redirect
            clearLoginData();
            window.location.href = 'index.html';
            return null;
        }
        
        // Get user data from response
        const userData = await response.json();
        
        // Update localStorage with fresh data
        localStorage.setItem('user_data', JSON.stringify(userData));
        
        return userData;
        
    } catch (error) {
        console.error('Authentication check error:', error);
        // Network error, try to use cached data
        const cachedUserData = localStorage.getItem('user_data');
        if (cachedUserData) {
            console.warn('Using cached user data due to network error');
            return JSON.parse(cachedUserData);
        }
        
        // No cached data, redirect to login
        window.location.href = 'index.html';
        return null;
    }
}

// Legacy function for compatibility (now just calls the combined function)
async function checkAuthentication() {
    const userData = await checkAuthenticationAndGetUser();
    return userData !== null;
}

// Setup Event Listeners
function setupEventListeners() {
    try {
        // Sidebar toggle - with null checks
        const sidebarToggle = document.getElementById('sidebarToggle');
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', toggleSidebar);
        }
        
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        if (mobileMenuBtn) {
            mobileMenuBtn.addEventListener('click', toggleMobileSidebar);
        }
        
        // Logout buttons - with null checks
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', logout);
        }
        
        const headerLogoutBtn = document.getElementById('headerLogoutBtn');
        if (headerLogoutBtn) {
            headerLogoutBtn.addEventListener('click', logout);
        }
        
        // User menu - with null check
        const userMenuBtn = document.getElementById('userMenuBtn');
        if (userMenuBtn) {
            userMenuBtn.addEventListener('click', toggleUserMenu);
        }
        
        // Modal - with null checks
        const modalClose = document.getElementById('modalClose');
        if (modalClose) {
            modalClose.addEventListener('click', closeModal);
        }
        
        const modalOkBtn = document.getElementById('modalOkBtn');
        if (modalOkBtn) {
            modalOkBtn.addEventListener('click', closeModal);
        }
        
        // Click outside to close dropdowns
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.user-menu')) {
                closeUserMenu();
            }
        });
        
        console.log('Event listeners setup completed');
        
    } catch (error) {
        console.error('Error setting up event listeners:', error);
        // Continue execution even if some event listeners fail
    }
}

// Utility Functions
function clearLoginData() {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('user_data');
    localStorage.removeItem('login_time');
}

function showLoadingIndicator() {
    // Show loading overlay
    const loadingHTML = `
        <div id="loadingOverlay" style="
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        ">
            <div style="text-align: center;">
                <div style="
                    width: 40px;
                    height: 40px;
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #007bff;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 15px;
                "></div>
                <div style="color: #666; font-size: 16px;">กำลังโหลด...</div>
            </div>
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    `;
    document.body.insertAdjacentHTML('beforeend', loadingHTML);
}

function hideLoadingIndicator() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.remove();
    }
}

// Update User Info
function updateUserInfo() {
    try {
        if (!currentUser) {
            console.error('No current user data available');
            return;
        }
        
        const userName = `${currentUser.first_name || ''} ${currentUser.last_name || ''}`.trim();
        const userRole = currentUser.role || 'user';
        
        // Update user name with null check
        const userNameElement = document.getElementById('userName');
        if (userNameElement) {
            userNameElement.textContent = userName || 'ไม่ระบุชื่อ';
        }
        
        // Update user role with null check
        const userRoleElement = document.getElementById('userRole');
        if (userRoleElement) {
            userRoleElement.textContent = getRoleDisplayName(userRole);
        }
        
        // Update header user name with null check
        const headerUserNameElement = document.getElementById('headerUserName');
        if (headerUserNameElement) {
            headerUserNameElement.textContent = currentUser.first_name || 'User';
        }
        
        console.log('User info updated successfully');
        
    } catch (error) {
        console.error('Error updating user info:', error);
        // Set fallback values
        const userNameElement = document.getElementById('userName');
        if (userNameElement) {
            userNameElement.textContent = 'ไม่ระบุชื่อ';
        }
        
        const userRoleElement = document.getElementById('userRole');
        if (userRoleElement) {
            userRoleElement.textContent = 'ผู้ใช้';
        }
        
        const headerUserNameElement = document.getElementById('headerUserName');
        if (headerUserNameElement) {
            headerUserNameElement.textContent = 'User';
        }
    }
}

// Generate Navigation based on user role
function generateNavigation() {
    try {
        const nav = document.getElementById('sidebarNav');
        if (!nav) {
            console.error('Sidebar navigation element not found');
            return;
        }
        
        if (!currentUser || !currentUser.role) {
            console.error('No user role available for navigation generation');
            return;
        }
        
        const role = currentUser.role;
        let navItems = [];
        
        // Common navigation items
        navItems.push({
            section: 'หลัก',
            items: [
                { id: 'overview', icon: '📊', text: 'ภาพรวม', href: '#overview' },
                { id: 'profile', icon: '👤', text: 'โปรไฟล์', href: '#profile' }
            ]
        });
        
        // Role-specific navigation
        if (role === 'superadmin') {
            navItems.push({
                section: 'การจัดการ',
                items: [
                    { id: 'admin-management', icon: '👥', text: 'จัดการ Admin', href: '#admin-management' },
                    { id: 'user-management', icon: '👤', text: 'จัดการผู้ใช้', href: '#user-management' },
                    { id: 'system-settings', icon: '⚙️', text: 'ตั้งค่าระบบ', href: '#system-settings' },
                    { id: 'audit-logs', icon: '📋', text: 'บันทึกการใช้งาน', href: '#audit-logs' }
                ]
            });
        } else if (['admin1', 'admin2', 'admin3'].includes(role)) {
            navItems.push({
                section: 'การจัดการ',
                items: [
                    { id: 'user-management', icon: '👤', text: 'จัดการผู้ใช้', href: '#user-management' },
                    { id: 'reports', icon: '📊', text: 'รายงาน', href: '#reports' }
                ]
            });
        }
        
        // Generate HTML
        let navHTML = '';
        navItems.forEach(section => {
            navHTML += `
                <div class="nav-section">
                    <div class="nav-section-title">${section.section}</div>
                    ${section.items.map(item => `
                        <a href="${item.href}" class="nav-item" data-section="${item.id}">
                            <span class="nav-item-icon">${item.icon}</span>
                            <span class="nav-item-text">${item.text}</span>
                        </a>
                    `).join('')}
                </div>
            `;
        });
        
        nav.innerHTML = navHTML;
        
        // Add click listeners to navigation items
        nav.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const section = this.dataset.section;
                navigateToSection(section);
            });
        });
        
        console.log('Navigation generated successfully');
        
    } catch (error) {
        console.error('Error generating navigation:', error);
        // Set fallback navigation
        const nav = document.getElementById('sidebarNav');
        if (nav) {
            nav.innerHTML = `
                <div class="nav-section">
                    <div class="nav-section-title">หลัก</div>
                    <a href="#overview" class="nav-item" data-section="overview">
                        <span class="nav-item-icon">📊</span>
                        <span class="nav-item-text">ภาพรวม</span>
                    </a>
                </div>
            `;
        }
    }
}

// Navigate to Section
function navigateToSection(section) {
    currentSection = section;
    
    // Update active navigation
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-section="${section}"]`).classList.add('active');
    
    // Update breadcrumb
    updateBreadcrumb(section);
    
    // Load content
    loadSectionContent(section);
}

// Update Breadcrumb
function updateBreadcrumb(section) {
    const breadcrumb = document.getElementById('breadcrumb');
    const sectionNames = {
        'overview': 'ภาพรวม',
        'profile': 'โปรไฟล์',
        'admin-management': 'จัดการ Admin',
        'user-management': 'จัดการผู้ใช้',
        'system-settings': 'ตั้งค่าระบบ',
        'audit-logs': 'บันทึกการใช้งาน',
        'reports': 'รายงาน'
    };
    
    breadcrumb.innerHTML = `<span>Dashboard</span> <span>›</span> <span>${sectionNames[section] || section}</span>`;
}

// Load Dashboard Content
function loadDashboardContent() {
    // Default to overview
    navigateToSection('overview');
}

// Load Section Content
async function loadSectionContent(section) {
    const content = document.getElementById('content');
    
    // Show loading
    content.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner-large"></div>
            <p>กำลังโหลด...</p>
        </div>
    `;
    
    try {
        switch (section) {
            case 'overview':
                await loadOverviewContent();
                break;
            case 'profile':
                await loadProfileContent();
                break;
            case 'admin-management':
                await loadAdminManagementContent();
                break;
            case 'user-management':
                await loadUserManagementContent();
                break;
            case 'system-settings':
                await loadSystemSettingsContent();
                break;
            case 'audit-logs':
                await loadAuditLogsContent();
                break;
            case 'reports':
                await loadReportsContent();
                break;
            default:
                content.innerHTML = '<div class="content-section"><h2>ไม่พบหน้าที่ต้องการ</h2></div>';
        }
    } catch (error) {
        console.error('Error loading section content:', error);
        content.innerHTML = `
            <div class="content-section">
                <h2>เกิดข้อผิดพลาด</h2>
                <p>ไม่สามารถโหลดเนื้อหาได้ กรุณาลองใหม่อีกครั้ง</p>
            </div>
        `;
    }
}

// Load Overview Content
async function loadOverviewContent() {
    const content = document.getElementById('content');
    
    // Get statistics
    const stats = await getSystemStats();
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">ภาพรวมระบบ</h1>
            <p class="dashboard-subtitle">สถิติและข้อมูลสำคัญของระบบ Authentication</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">ผู้ใช้ทั้งหมด</div>
                    <div class="stat-icon" style="background: #dbeafe; color: #3b82f6;">👥</div>
                </div>
                <div class="stat-value">${stats.totalUsers}</div>
                <div class="stat-change positive">+${stats.newUsersToday} วันนี้</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">ผู้ใช้ออนไลน์</div>
                    <div class="stat-icon" style="background: #dcfce7; color: #059669;">🟢</div>
                </div>
                <div class="stat-value">${stats.onlineUsers}</div>
                <div class="stat-change positive">+${stats.onlineChange}%</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">การเข้าสู่ระบบวันนี้</div>
                    <div class="stat-icon" style="background: #fef3c7; color: #d97706;">🔑</div>
                </div>
                <div class="stat-value">${stats.todayLogins}</div>
                <div class="stat-change ${stats.loginChange >= 0 ? 'positive' : 'negative'}">${stats.loginChange >= 0 ? '+' : ''}${stats.loginChange}%</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">ความปลอดภัย</div>
                    <div class="stat-icon" style="background: ${stats.securityScore >= 90 ? '#dcfce7' : '#fef3c7'}; color: ${stats.securityScore >= 90 ? '#059669' : '#d97706'};">🛡️</div>
                </div>
                <div class="stat-value">${stats.securityScore}%</div>
                <div class="stat-change ${stats.securityScore >= 90 ? 'positive' : 'negative'}">${stats.securityScore >= 90 ? 'ปลอดภัย' : 'ต้องปรับปรุง'}</div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">กิจกรรมล่าสุด</h2>
                <div class="section-actions">
                    <button class="btn btn-secondary" onclick="refreshActivity()">🔄 รีเฟรช</button>
                </div>
            </div>
            <div id="recentActivity">
                ${generateRecentActivity(stats.recentActivity)}
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">ข้อมูลระบบ</h2>
            </div>
            <div class="system-info">
                <p><strong>เวอร์ชันระบบ:</strong> ${stats.systemVersion}</p>
                <p><strong>เซิร์ฟเวอร์:</strong> ${stats.serverStatus}</p>
                <p><strong>ฐานข้อมูล:</strong> ${stats.databaseStatus}</p>
                <p><strong>อัพเดทล่าสุด:</strong> ${stats.lastUpdate}</p>
            </div>
        </div>
    `;
}

// Load Profile Content
async function loadProfileContent() {
    const content = document.getElementById('content');
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">โปรไฟล์ผู้ใช้</h1>
            <p class="dashboard-subtitle">จัดการข้อมูลส่วนตัวและการตั้งค่าบัญชี</p>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">ข้อมูลส่วนตัว</h2>
                <div class="section-actions">
                    <button class="btn btn-primary" onclick="editProfile()">✏️ แก้ไข</button>
                </div>
            </div>
            <div class="profile-info">
                <div class="profile-field">
                    <label>ชื่อ:</label>
                    <span>${currentUser.first_name}</span>
                </div>
                <div class="profile-field">
                    <label>นามสกุล:</label>
                    <span>${currentUser.last_name}</span>
                </div>
                <div class="profile-field">
                    <label>อีเมล:</label>
                    <span>${currentUser.email}</span>
                </div>
                <div class="profile-field">
                    <label>บทบาท:</label>
                    <span>${getRoleDisplayName(currentUser.role)}</span>
                </div>
                <div class="profile-field">
                    <label>สถานะ:</label>
                    <span class="status-badge ${currentUser.is_active ? 'active' : 'inactive'}">
                        ${currentUser.is_active ? 'ใช้งานได้' : 'ไม่ใช้งาน'}
                    </span>
                </div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">เปลี่ยนรหัสผ่าน</h2>
            </div>
            <form id="changePasswordForm" class="password-form">
                <div class="form-group">
                    <label>รหัสผ่านปัจจุบัน:</label>
                    <input type="password" id="currentPassword" required>
                </div>
                <div class="form-group">
                    <label>รหัสผ่านใหม่:</label>
                    <input type="password" id="newPassword" required>
                </div>
                <div class="form-group">
                    <label>ยืนยันรหัสผ่านใหม่:</label>
                    <input type="password" id="confirmPassword" required>
                </div>
                <button type="submit" class="btn btn-primary">เปลี่ยนรหัสผ่าน</button>
            </form>
        </div>
    `;
    
    // Add form listener
    document.getElementById('changePasswordForm').addEventListener('submit', handleChangePassword);
}

// Get System Stats
async function getSystemStats() {
    // Mock data for now - replace with actual API calls
    return {
        totalUsers: 1247,
        newUsersToday: 12,
        onlineUsers: 89,
        onlineChange: 15,
        todayLogins: 234,
        loginChange: 8,
        securityScore: 94,
        systemVersion: '1.0.0',
        serverStatus: 'ออนไลน์',
        databaseStatus: 'ปกติ',
        lastUpdate: '2025-01-31 10:30:00',
        recentActivity: [
            { user: 'admin1@example.com', action: 'เข้าสู่ระบบ', time: '10:30' },
            { user: 'user@example.com', action: 'อัพเดทโปรไฟล์', time: '10:25' },
            { user: 'admin2@example.com', action: 'สร้างผู้ใช้ใหม่', time: '10:20' }
        ]
    };
}

// Generate Recent Activity HTML
function generateRecentActivity(activities) {
    return activities.map(activity => `
        <div class="activity-item">
            <div class="activity-info">
                <strong>${activity.user}</strong> ${activity.action}
            </div>
            <div class="activity-time">${activity.time}</div>
        </div>
    `).join('');
}

// Get Role Display Name
function getRoleDisplayName(role) {
    const roleNames = {
        'superadmin': 'ผู้ดูแลระบบสูงสุด',
        'admin1': 'ผู้ดูแลระบบ 1',
        'admin2': 'ผู้ดูแลระบบ 2',
        'admin3': 'ผู้ดูแลระบบ 3',
        'user': 'ผู้ใช้ทั่วไป'
    };
    return roleNames[role] || role;
}

// Sidebar Functions
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('mainContent');
    
    sidebar.classList.toggle('collapsed');
    mainContent.classList.toggle('expanded');
}

function toggleMobileSidebar() {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('mobile-open');
}

// User Menu Functions
function toggleUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    userMenu.classList.toggle('open');
}

function closeUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    userMenu.classList.remove('open');
}

// Modal Functions
function showModal(title, message) {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalMessage').textContent = message;
    document.getElementById('alertModal').classList.add('show');
}

function closeModal() {
    document.getElementById('alertModal').classList.remove('show');
}

// Logout Function
function logout() {
    if (confirm('คุณต้องการออกจากระบบหรือไม่?')) {
        window.AuthSystem.clearLoginData();
        window.location.href = 'index.html';
    }
}

// Real-time Updates
function startRealTimeUpdates() {
    // Update time every second
    updateHeaderTime();
    setInterval(updateHeaderTime, 1000);
    
    // Update stats every 30 seconds
    setInterval(() => {
        if (currentSection === 'overview') {
            loadOverviewContent();
        }
    }, 30000);
}

function updateHeaderTime() {
    const now = new Date();
    const timeString = now.toLocaleString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    const headerTime = document.getElementById('headerTime');
    if (headerTime) {
        headerTime.textContent = timeString;
    }
}

// Load Admin Management Content
async function loadAdminManagementContent() {
    const content = document.getElementById('content');
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">จัดการ Admin</h1>
            <p class="dashboard-subtitle">จัดการผู้ดูแลระบบและสิทธิ์การเข้าถึง</p>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">รายชื่อ Admin</h2>
                <div class="section-actions">
                    <button class="btn btn-primary" onclick="showAddAdminModal()">➕ เพิ่ม Admin</button>
                    <button class="btn btn-secondary" onclick="refreshAdminList()">🔄 รีเฟรช</button>
                </div>
            </div>
            <div id="adminListContainer">
                <div class="loading-content">
                    <div class="loading-spinner-large"></div>
                    <p>กำลังโหลดรายชื่อ Admin...</p>
                </div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">สถิติ Admin</h2>
            </div>
            <div class="admin-stats-grid">
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ทั้งหมด</div>
                        <div class="stat-icon" style="background: #dbeafe; color: #3b82f6;">👥</div>
                    </div>
                    <div class="stat-value" id="totalAdmins">-</div>
                    <div class="stat-change">Admin1, Admin2, Admin3</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ออนไลน์</div>
                        <div class="stat-icon" style="background: #dcfce7; color: #059669;">🟢</div>
                    </div>
                    <div class="stat-value" id="onlineAdmins">-</div>
                    <div class="stat-change" id="onlineAdminsChange">กำลังตรวจสอบ...</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ใช้งานได้</div>
                        <div class="stat-icon" style="background: #fef3c7; color: #d97706;">✅</div>
                    </div>
                    <div class="stat-value" id="activeAdmins">-</div>
                    <div class="stat-change" id="activeAdminsChange">สถานะปกติ</div>
                </div>
            </div>
        </div>
    `;
    
    // Add CSS for admin stats grid
    if (!document.getElementById('adminStatsCSS')) {
        const style = document.createElement('style');
        style.id = 'adminStatsCSS';
        style.textContent = `
            .admin-stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 20px;
            }
            
            .admin-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }
            
            .admin-table th,
            .admin-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e2e8f0;
            }
            
            .admin-table th {
                background: #f8fafc;
                font-weight: 600;
                color: #374151;
            }
            
            .admin-table tr:hover {
                background: #f8fafc;
            }
            
            .status-badge {
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 12px;
                font-weight: 500;
            }
            
            .status-badge.active {
                background: #dcfce7;
                color: #059669;
            }
            
            .status-badge.inactive {
                background: #fee2e2;
                color: #dc2626;
            }
            
            .admin-actions {
                display: flex;
                gap: 8px;
            }
            
            .btn-small {
                padding: 4px 8px;
                font-size: 12px;
                border-radius: 4px;
            }
            
            .btn-edit {
                background: #3b82f6;
                color: white;
                border: none;
                cursor: pointer;
            }
            
            .btn-delete {
                background: #ef4444;
                color: white;
                border: none;
                cursor: pointer;
            }
            
            .btn-edit:hover {
                background: #2563eb;
            }
            
            .btn-delete:hover {
                background: #dc2626;
            }
        `;
        document.head.appendChild(style);
    }
    
    // Load admin list
    await loadAdminList();
}

async function loadUserManagementContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="content-header">
            <h2>จัดการผู้ใช้</h2>
            <p>จัดการข้อมูลผู้ใช้ทั่วไป</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">👥</div>
                <div class="stat-info">
                    <div class="stat-number" id="totalUsers">-</div>
                    <div class="stat-label">ผู้ใช้ทั้งหมด</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">✅</div>
                <div class="stat-info">
                    <div class="stat-number" id="activeUsers">-</div>
                    <div class="stat-label">ใช้งานได้</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🔒</div>
                <div class="stat-info">
                    <div class="stat-number" id="inactiveUsers">-</div>
                    <div class="stat-label">ปิดใช้งาน</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🆕</div>
                <div class="stat-info">
                    <div class="stat-number" id="newUsers">-</div>
                    <div class="stat-label">ใหม่วันนี้</div>
                </div>
            </div>
        </div>
        
        <div class="management-section">
            <div class="section-header">
                <h3>รายชื่อผู้ใช้</h3>
                <div class="section-actions">
                    <button class="btn btn-primary" onclick="showAddUserModal()">
                        <span class="btn-icon">➕</span>
                        เพิ่มผู้ใช้ใหม่
                    </button>
                    <button class="btn btn-secondary" onclick="loadUserList()">
                        <span class="btn-icon">🔄</span>
                        รีเฟรช
                    </button>
                </div>
            </div>
            <div id="userListContainer">
                <div class="loading-content">
                    <div class="loading-spinner-large"></div>
                    <p>กำลังโหลดรายชื่อผู้ใช้...</p>
                </div>
            </div>
        </div>
    `;
    
    // โหลดข้อมูลผู้ใช้
    await loadUserList();
}

async function loadSystemSettingsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">ตั้งค่าระบบ</h1>
            <p class="dashboard-subtitle">กำหนดค่าและการตั้งค่าระบบ</p>
        </div>
        <div class="content-section">
            <p>ฟีเจอร์นี้กำลังพัฒนา...</p>
        </div>
    `;
}

async function loadAuditLogsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">บันทึกการใช้งาน</h1>
            <p class="dashboard-subtitle">ตรวจสอบกิจกรรมและการใช้งานระบบ</p>
        </div>
        <div class="content-section">
            <p>ฟีเจอร์นี้กำลังพัฒนา...</p>
        </div>
    `;
}

async function loadReportsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">รายงาน</h1>
            <p class="dashboard-subtitle">รายงานและสถิติการใช้งาน</p>
        </div>
        <div class="content-section">
            <p>ฟีเจอร์นี้กำลังพัฒนา...</p>
        </div>
    `;
}

// Handle Change Password
async function handleChangePassword(event) {
    event.preventDefault();
    
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (newPassword !== confirmPassword) {
        showModal('ข้อผิดพลาด', 'รหัสผ่านใหม่ไม่ตรงกัน');
        return;
    }
    
    if (newPassword.length < 8) {
        showModal('ข้อผิดพลาด', 'รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร');
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall('/auth/change-password', {
            method: 'POST',
            body: JSON.stringify({
                old_password: currentPassword,
                new_password: newPassword
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', 'เปลี่ยนรหัสผ่านเรียบร้อยแล้ว');
            document.getElementById('changePasswordForm').reset();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || 'ไม่สามารถเปลี่ยนรหัสผ่านได้');
        }
    } catch (error) {
        console.error('Change password error:', error);
        showModal('ข้อผิดพลาด', 'เกิดข้อผิดพลาดในการเปลี่ยนรหัสผ่าน');
    }
}

// Utility functions
function refreshActivity() {
    if (currentSection === 'overview') {
        loadOverviewContent();
    }
}

function editProfile() {
    showModal('แจ้งเตือน', 'ฟีเจอร์แก้ไขโปรไฟล์กำลังพัฒนา');
}

// Admin Management Functions
async function loadAdminList() {
    try {
        // แสดง loading state
        document.getElementById('adminListContainer').innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner-large"></div>
                <p>กำลังโหลดรายชื่อ Admin...</p>
            </div>
        `;
        
        // เรียก API เพื่อดึงรายชื่อ Admin (SuperAdmin เท่านั้น)
        const response = await window.AuthSystem.apiCall('/admin/admins');
        
        if (response && response.ok) {
            const admins = await response.json();
            displayAdminList(admins);
            updateAdminStats(admins);
        } else {
            // แสดง error message
            const errorData = await response.json().catch(() => ({}));
            document.getElementById('adminListContainer').innerHTML = `
                <div class="error-message">
                    <p>❌ ไม่สามารถโหลดรายชื่อ Admin ได้</p>
                    <p class="error-detail">${errorData.detail || 'เกิดข้อผิดพลาดในการเชื่อมต่อ API'}</p>
                    <button class="btn btn-primary" onclick="loadAdminList()">ลองใหม่</button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading admin list:', error);
        document.getElementById('adminListContainer').innerHTML = `
            <div class="error-message">
                <p>❌ เกิดข้อผิดพลาดในการโหลดข้อมูล</p>
                <p class="error-detail">${error.message}</p>
                <button class="btn btn-primary" onclick="loadAdminList()">ลองใหม่</button>
            </div>
        `;
    }
}

function displayAdminList(admins) {
    const container = document.getElementById('adminListContainer');
    
    if (admins.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>ไม่มี Admin ในระบบ</p>
                <button class="btn btn-primary" onclick="showAddAdminModal()">เพิ่ม Admin แรก</button>
            </div>
        `;
        return;
    }
    
    const tableHTML = `
        <table class="admin-table">
            <thead>
                <tr>
                    <th>ชื่อ</th>
                    <th>อีเมล</th>
                    <th>บทบาท</th>
                    <th>สถานะ</th>
                    <th>เข้าสู่ระบบล่าสุด</th>
                    <th>การจัดการ</th>
                </tr>
            </thead>
            <tbody>
                ${admins.map(admin => `
                    <tr>
                        <td>${admin.first_name} ${admin.last_name}</td>
                        <td>${admin.email}</td>
                        <td>${getRoleDisplayName(admin.role)}</td>
                        <td>
                            <span class="status-badge ${admin.is_active ? 'active' : 'inactive'}">
                                ${admin.is_active ? 'ใช้งานได้' : 'ไม่ใช้งาน'}
                            </span>
                        </td>
                        <td>${formatDateTime(admin.last_login)}</td>
                        <td>
                            <div class="admin-actions">
                                <button class="btn-small btn-edit" onclick="editAdmin('${admin.id}')">แก้ไข</button>
                                <button class="btn-small btn-delete" onclick="deleteAdmin('${admin.id}', '${admin.email}')">ลบ</button>
                                <button class="btn-small ${admin.is_active ? 'btn-delete' : 'btn-edit'}" 
                                        onclick="toggleAdminStatus('${admin.id}', ${admin.is_active})">
                                    ${admin.is_active ? 'ปิดใช้งาน' : 'เปิดใช้งาน'}
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
}

function updateAdminStats(admins) {
    const totalAdmins = admins.length;
    const activeAdmins = admins.filter(admin => admin.is_active).length;
    const onlineAdmins = admins.filter(admin => {
        if (!admin.last_login) return false;
        const lastLogin = new Date(admin.last_login);
        const now = new Date();
        const hoursDiff = (now - lastLogin) / (1000 * 60 * 60);
        return hoursDiff < 1; // Consider online if logged in within last hour
    }).length;
    
    document.getElementById('totalAdmins').textContent = totalAdmins;
    document.getElementById('activeAdmins').textContent = activeAdmins;
    document.getElementById('onlineAdmins').textContent = onlineAdmins;
    
    document.getElementById('activeAdminsChange').textContent = 
        activeAdmins === totalAdmins ? 'ทั้งหมดใช้งานได้' : `${totalAdmins - activeAdmins} ไม่ใช้งาน`;
    document.getElementById('onlineAdminsChange').textContent = 
        onlineAdmins > 0 ? `${onlineAdmins} คนออนไลน์` : 'ไม่มีคนออนไลน์';
}

function formatDateTime(dateString) {
    if (!dateString) return 'ไม่เคยเข้าสู่ระบบ';
    
    const date = new Date(dateString);
    return date.toLocaleString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function refreshAdminList() {
    loadAdminList();
}

function showAddAdminModal() {
    const modalHTML = `
        <div class="modal show" id="addAdminModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>เพิ่ม Admin ใหม่</h3>
                    <button class="modal-close" onclick="closeAddAdminModal()">×</button>
                </div>
                <div class="modal-body">
                    <form id="addAdminForm">
                        <div class="form-group">
                            <label>ชื่อ:</label>
                            <input type="text" id="adminFirstName" required>
                        </div>
                        <div class="form-group">
                            <label>นามสกุล:</label>
                            <input type="text" id="adminLastName" required>
                        </div>
                        <div class="form-group">
                            <label>อีเมล:</label>
                            <input type="email" id="adminEmail" required>
                        </div>
                        <div class="form-group">
                            <label>บทบาท:</label>
                            <select id="adminRole" required>
                                <option value="">เลือกบทบาท</option>
                                <option value="admin1">Admin 1</option>
                                <option value="admin2">Admin 2</option>
                                <option value="admin3">Admin 3</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>รหัสผ่าน:</label>
                            <input type="password" id="adminPassword" required minlength="8">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeAddAdminModal()">ยกเลิก</button>
                    <button class="btn btn-primary" onclick="submitAddAdmin()">เพิ่ม Admin</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function closeAddAdminModal() {
    const modal = document.getElementById('addAdminModal');
    if (modal) {
        modal.remove();
    }
}

async function submitAddAdmin() {
    const firstName = document.getElementById('adminFirstName').value;
    const lastName = document.getElementById('adminLastName').value;
    const email = document.getElementById('adminEmail').value;
    const role = document.getElementById('adminRole').value;
    const password = document.getElementById('adminPassword').value;
    
    if (!firstName || !lastName || !email || !role || !password) {
        showModal('ข้อผิดพลาด', 'กรุณากรอกข้อมูลให้ครบถ้วน');
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall('/admin/admins', {
            method: 'POST',
            body: JSON.stringify({
                first_name: firstName,
                last_name: lastName,
                email: email,
                role: role,
                password: password,
                is_active: true
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', 'เพิ่ม Admin ใหม่เรียบร้อยแล้ว');
            closeAddAdminModal();
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || 'ไม่สามารถเพิ่ม Admin ได้');
        }
    } catch (error) {
        console.error('Error adding admin:', error);
        showModal('ข้อผิดพลาด', 'เกิดข้อผิดพลาดในการเพิ่ม Admin');
    }
}

async function editAdmin(adminId) {
    showModal('แจ้งเตือน', 'ฟีเจอร์แก้ไข Admin กำลasync function deleteAdmin(adminId) {
    if (confirm('คุณแน่ใจหรือไม่ที่จะลบ Admin นี้?')) {
        try {
            const response = await window.AuthSystem.apiCall(`/admin/admins/${adminId}`, {
                method: 'DELETE'
            });
            
            if (response && response.ok) {
                showModal('สำเร็จ', 'ลบ Admin เรียบร้อยแล้ว');
                loadAdminList();
            } else {
                const data = await response.json();
                showModal('ข้อผิดพลาด', data.detail || 'ไม่สามารถลบ Admin ได้');
            }
        } catch (error) {
            console.error('Error deleting admin:', error);
            showModal('ข้อผิดพลาด', 'เกิดข้อผิดพลาดในการลบ Admin');
        }
    }
async function toggleAdminStatus(adminId, currentStatus) {
    const action = currentStatus ? 'ปิดใช้งาน' : 'เปิดใช้งาน';
    
    if (!confirm(`คุณต้องการ${action} Admin นี้หรือไม่?`)) {
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall(`/admin/admins/${adminId}`, {
            method: 'PUT',
            body: JSON.stringify({
                is_active: !currentStatus
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', `${action} Admin เรียบร้อยแล้ว`);
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || `ไม่สามารถ${action} Admin ได้`);
        }
    } catch (error) {
        console.error('Error toggling admin status:', error);
        showModal('ข้อผิดพลาด', `เกิดข้อผิดพลาดในการ${action} Admin`);
    }
}         body: JSON.stringify({
                is_active: !currentStatus
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', `${action} Admin เรียบร้อยแล้ว`);
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || `ไม่สามารถ${action} Admin ได้`);
        }
    } catch (error) {
        console.error('Error toggling admin status:', error);
        showModal('ข้อผิดพลาด', `เกิดข้อผิดพลาดในการ${action} Admin`);
    }
}



// User Management Functions
async function loadUserList() {
    try {
        // แสดง loading state
        document.getElementById('userListContainer').innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner-large"></div>
                <p>กำลังโหลดรายชื่อผู้ใช้...</p>
            </div>
        `;
        
        // เรียก API เพื่อดึงรายชื่อผู้ใช้ (กรองเฉพาะ role = user)
        const response = await window.AuthSystem.apiCall('/users/?role=user');
        
        if (response && response.ok) {
            const data = await response.json();
            const users = data.users || data || [];
            
            displayUserList(users);
            updateUserStats(users);
        } else {
            // แสดง error message
            const errorData = await response.json().catch(() => ({}));
            document.getElementById('userListContainer').innerHTML = `
                <div class="error-message">
                    <p>❌ ไม่สามารถโหลดรายชื่อผู้ใช้ได้</p>
                    <p class="error-detail">${errorData.detail || 'เกิดข้อผิดพลาดในการเชื่อมต่อ API'}</p>
                    <button class="btn btn-primary" onclick="loadUserList()">ลองใหม่</button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading user list:', error);
        document.getElementById('userListContainer').innerHTML = `
            <div class="error-message">
                <p>❌ เกิดข้อผิดพลาดในการโหลดข้อมูล</p>
                <p class="error-detail">${error.message}</p>
                <button class="btn btn-primary" onclick="loadUserList()">ลองใหม่</button>
            </div>
        `;
    }
}

function displayUserList(users) {
    const container = document.getElementById('userListContainer');
    
    if (!users || users.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>ไม่มีข้อมูลผู้ใช้</p>
            </div>
        `;
        return;
    }
    
    const tableHTML = `
        <div class="table-container">
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>ชื่อ-นามสกุล</th>
                        <th>อีเมล</th>
                        <th>สถานะ</th>
                        <th>วันที่สร้าง</th>
                        <th>เข้าสู่ระบบล่าสุด</th>
                        <th>จัดการ</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.first_name} ${user.last_name}</td>
                            <td>${user.email}</td>
                            <td>
                                <span class="status-badge ${user.is_active ? 'active' : 'inactive'}">
                                    ${user.is_active ? 'ใช้งานได้' : 'ปิดใช้งาน'}
                                </span>
                            </td>
                            <td>${formatDate(user.created_at)}</td>
                            <td>${user.last_login ? formatDate(user.last_login) : 'ไม่เคยเข้าสู่ระบบ'}</td>
                            <td>
                                <div class="admin-actions">
                                    <button class="btn-small btn-edit" onclick="editUser('${user.id}')">แก้ไข</button>
                                    <button class="btn-small ${user.is_active ? 'btn-delete' : 'btn-edit'}" 
                                            onclick="toggleUserStatus('${user.id}', ${user.is_active})">
                                        ${user.is_active ? 'ปิดใช้งาน' : 'เปิดใช้งาน'}
                                    </button>
                                    <button class="btn-small btn-delete" onclick="deleteUser('${user.id}')">ลบ</button>
                                </div>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
    
    container.innerHTML = tableHTML;
}

function updateUserStats(users) {
    const total = users.length;
    const active = users.filter(user => user.is_active).length;
    const inactive = total - active;
    
    // คำนวณผู้ใช้ใหม่วันนี้
    const today = new Date().toDateString();
    const newToday = users.filter(user => {
        const createdDate = new Date(user.created_at).toDateString();
        return createdDate === today;
    }).length;
    
    document.getElementById('totalUsers').textContent = total.toLocaleString();
    document.getElementById('activeUsers').textContent = active.toLocaleString();
    document.getElementById('inactiveUsers').textContent = inactive.toLocaleString();
    document.getElementById('newUsers').textContent = newToday.toLocaleString();
}

function showAddUserModal() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>เพิ่มผู้ใช้ใหม่</h3>
                <button class="modal-close" onclick="closeAddUserModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="userFirstName">ชื่อ</label>
                    <input type="text" id="userFirstName" required>
                </div>
                <div class="form-group">
                    <label for="userLastName">นามสกุล</label>
                    <input type="text" id="userLastName" required>
                </div>
                <div class="form-group">
                    <label for="userEmail">อีเมล</label>
                    <input type="email" id="userEmail" required>
                </div>
                <div class="form-group">
                    <label for="userPassword">รหัสผ่าน</label>
                    <input type="password" id="userPassword" required>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeAddUserModal()">ยกเลิก</button>
                <button class="btn btn-primary" onclick="submitAddUser()">เพิ่มผู้ใช้</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

function closeAddUserModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

async function submitAddUser() {
    const firstName = document.getElementById('userFirstName').value;
    const lastName = document.getElementById('userLastName').value;
    const email = document.getElementById('userEmail').value;
    const password = document.getElementById('userPassword').value;
    
    if (!firstName || !lastName || !email || !password) {
        showModal('ข้อผิดพลาด', 'กรุณากรอกข้อมูลให้ครบถ้วน');
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall('/users/', {
            method: 'POST',
            body: JSON.stringify({
                first_name: firstName,
                last_name: lastName,
                email: email,
                role: 'user',
                password: password,
                is_active: true
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', 'เพิ่มผู้ใช้ใหม่เรียบร้อยแล้ว');
            closeAddUserModal();
            loadUserList();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || 'ไม่สามารถเพิ่มผู้ใช้ได้');
        }
    } catch (error) {
        console.error('Error adding user:', error);
        showModal('ข้อผิดพลาด', 'เกิดข้อผิดพลาดในการเพิ่มผู้ใช้');
    }
}

async function editUser(userId) {
    showModal('แจ้งเตือน', 'ฟีเจอร์แก้ไขผู้ใช้กำลังพัฒนา');
}

async function deleteUser(userId) {
    if (confirm('คุณแน่ใจหรือไม่ที่จะลบผู้ใช้นี้?')) {
        try {
            const response = await window.AuthSystem.apiCall(`/users/${userId}`, {
                method: 'DELETE'
            });
            
            if (response && response.ok) {
                showModal('สำเร็จ', 'ลบผู้ใช้เรียบร้อยแล้ว');
                loadUserList();
            } else {
                const data = await response.json();
                showModal('ข้อผิดพลาด', data.detail || 'ไม่สามารถลบผู้ใช้ได้');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            showModal('ข้อผิดพลาด', 'เกิดข้อผิดพลาดในการลบผู้ใช้');
        }
    }
}

async function toggleUserStatus(userId, currentStatus) {
    const action = currentStatus ? 'ปิดใช้งาน' : 'เปิดใช้งาน';
    
    if (!confirm(`คุณต้องการ${action}ผู้ใช้นี้หรือไม่?`)) {
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall(`/users/${userId}`, {
            method: 'PUT',
            body: JSON.stringify({
                is_active: !currentStatus
            })
        });
        
        if (response && response.ok) {
            showModal('สำเร็จ', `${action}ผู้ใช้เรียบร้อยแล้ว`);
            loadUserList();
        } else {
            const data = await response.json();
            showModal('ข้อผิดพลาด', data.detail || `ไม่สามารถ${action}ผู้ใช้ได้`);
        }
    } catch (error) {
        console.error('Error toggling user status:', error);
        showModal('ข้อผิดพลาด', `เกิดข้อผิดพลาดในการ${action}ผู้ใช้`);
    }
}


// Missing Functions - Added to fix loading issues

// Get Role Display Name
function getRoleDisplayName(role) {
    const roleNames = {
        'superadmin': 'ผู้ดูแลระบบสูงสุด',
        'admin1': 'ผู้ดูแลระบบ 1',
        'admin2': 'ผู้ดูแลระบบ 2', 
        'admin3': 'ผู้ดูแลระบบ 3',
        'user': 'ผู้ใช้งาน'
    };
    return roleNames[role] || 'ผู้ใช้งาน';
}

// Load Dashboard Content (Default Overview)
function loadDashboardContent() {
    try {
        // Default to overview section
        navigateToSection('overview');
        console.log('Dashboard content loaded successfully');
    } catch (error) {
        console.error('Error loading dashboard content:', error);
    }
}

// Start Real-time Updates (Placeholder)
function startRealTimeUpdates() {
    try {
        // Placeholder for real-time updates
        // Can be implemented later with WebSocket or polling
        console.log('Real-time updates started (placeholder)');
    } catch (error) {
        console.error('Error starting real-time updates:', error);
    }
}

// Get System Stats (for Overview)
async function getSystemStats() {
    try {
        // Mock data for now - can be replaced with real API calls
        return {
            totalUsers: 0,
            activeUsers: 0,
            totalAdmins: 0,
            systemStatus: 'Online'
        };
    } catch (error) {
        console.error('Error getting system stats:', error);
        return {
            totalUsers: 0,
            activeUsers: 0,
            totalAdmins: 0,
            systemStatus: 'Error'
        };
    }
}

// Load Overview Content
async function loadOverviewContent() {
    try {
        const content = document.getElementById('content');
        if (!content) {
            console.error('Content element not found');
            return;
        }

        const stats = await getSystemStats();
        
        content.innerHTML = `
            <div class="content-section">
                <h2>ภาพรวมระบบ</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">👥</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.totalUsers}</div>
                            <div class="stat-label">ผู้ใช้ทั้งหมด</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">✅</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.activeUsers}</div>
                            <div class="stat-label">ผู้ใช้ที่ใช้งานอยู่</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">🔧</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.totalAdmins}</div>
                            <div class="stat-label">ผู้ดูแลระบบ</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">🟢</div>
                        <div class="stat-info">
                            <div class="stat-number">${stats.systemStatus}</div>
                            <div class="stat-label">สถานะระบบ</div>
                        </div>
                    </div>
                </div>
                <div class="welcome-message">
                    <h3>ยินดีต้อนรับ, ${currentUser ? currentUser.first_name : 'User'}!</h3>
                    <p>คุณสามารถใช้เมนูด้านซ้ายเพื่อจัดการระบบได้</p>
                </div>
            </div>
        `;
        
        console.log('Overview content loaded successfully');
        
    } catch (error) {
        console.error('Error loading overview content:', error);
        const content = document.getElementById('content');
        if (content) {
            content.innerHTML = `
                <div class="content-section">
                    <h2>เกิดข้อผิดพลาด</h2>
                    <p>ไม่สามารถโหลดข้อมูลภาพรวมได้</p>
                </div>
            `;
        }
    }
}

// Load Profile Content
async function loadProfileContent() {
    try {
        const content = document.getElementById('content');
        if (!content) {
            console.error('Content element not found');
            return;
        }

        content.innerHTML = `
            <div class="content-section">
                <h2>โปรไฟล์ผู้ใช้</h2>
                <div class="profile-info">
                    <div class="profile-field">
                        <label>ชื่อ:</label>
                        <span>${currentUser ? currentUser.first_name : 'ไม่ระบุ'}</span>
                    </div>
                    <div class="profile-field">
                        <label>นามสกุล:</label>
                        <span>${currentUser ? currentUser.last_name : 'ไม่ระบุ'}</span>
                    </div>
                    <div class="profile-field">
                        <label>อีเมล:</label>
                        <span>${currentUser ? currentUser.email : 'ไม่ระบุ'}</span>
                    </div>
                    <div class="profile-field">
                        <label>บทบาท:</label>
                        <span>${currentUser ? getRoleDisplayName(currentUser.role) : 'ไม่ระบุ'}</span>
                    </div>
                </div>
            </div>
        `;
        
        console.log('Profile content loaded successfully');
        
    } catch (error) {
        console.error('Error loading profile content:', error);
        const content = document.getElementById('content');
        if (content) {
            content.innerHTML = `
                <div class="content-section">
                    <h2>เกิดข้อผิดพลาด</h2>
                    <p>ไม่สามารถโหลดข้อมูลโปรไฟล์ได้</p>
                </div>
            `;
        }
    }
}

// Placeholder functions for other content sections
async function loadAdminManagementContent() {
    const content = document.getElementById('content');
    if (content) {
        content.innerHTML = `
            <div class="content-section">
                <h2>จัดการ Admin</h2>
                <p>ฟีเจอร์นี้อยู่ระหว่างการพัฒนา</p>
            </div>
        `;
    }
}

async function loadUserManagementContent() {
    const content = document.getElementById('content');
    if (content) {
        content.innerHTML = `
            <div class="content-section">
                <h2>จัดการผู้ใช้</h2>
                <p>ฟีเจอร์นี้อยู่ระหว่างการพัฒนา</p>
            </div>
        `;
    }
}

async function loadSystemSettingsContent() {
    const content = document.getElementById('content');
    if (content) {
        content.innerHTML = `
            <div class="content-section">
                <h2>ตั้งค่าระบบ</h2>
                <p>ฟีเจอร์นี้อยู่ระหว่างการพัฒนา</p>
            </div>
        `;
    }
}

async function loadAuditLogsContent() {
    const content = document.getElementById('content');
    if (content) {
        content.innerHTML = `
            <div class="content-section">
                <h2>บันทึกการใช้งาน</h2>
                <p>ฟีเจอร์นี้อยู่ระหว่างการพัฒนา</p>
            </div>
        `;
    }
}

async function loadReportsContent() {
    const content = document.getElementById('content');
    if (content) {
        content.innerHTML = `
            <div class="content-section">
                <h2>รายงาน</h2>
                <p>ฟีเจอร์นี้อยู่ระหว่างการพัฒนา</p>
            </div>
        `;
    }
}

// UI Helper Functions
function toggleSidebar() {
    const sidebar = document.querySelector('.sidebar');
    if (sidebar) {
        sidebar.classList.toggle('collapsed');
    }
}

function toggleMobileSidebar() {
    const sidebar = document.querySelector('.sidebar');
    if (sidebar) {
        sidebar.classList.toggle('mobile-open');
    }
}

function toggleUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    if (userMenu) {
        userMenu.classList.toggle('active');
    }
}

function closeUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    if (userMenu) {
        userMenu.classList.remove('active');
    }
}

function showModal(title, message) {
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modalTitle');
    const modalMessage = document.getElementById('modalMessage');
    
    if (modal && modalTitle && modalMessage) {
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modal.style.display = 'flex';
    } else {
        // Fallback to alert if modal elements not found
        alert(`${title}: ${message}`);
    }
}

function closeModal() {
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function logout() {
    if (confirm('คุณต้องการออกจากระบบหรือไม่?')) {
        clearLoginData();
        window.location.href = 'index.html';
    }
}

console.log('All missing functions have been added successfully');

