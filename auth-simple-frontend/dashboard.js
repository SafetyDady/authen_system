// Dashboard JavaScript
let currentUser = null;
let currentSection = 'overview';

// Initialize Dashboard
document.addEventListener('DOMContentLoaded', function() {
    // Check authentication
    checkAuthentication();
    
    // Setup event listeners
    setupEventListeners();
    
    // Load user data and initialize dashboard
    loadUserData();
    
    // Start real-time updates
    startRealTimeUpdates();
});

// Check Authentication
function checkAuthentication() {
    const token = localStorage.getItem('access_token');
    if (!token) {
        window.location.href = 'index.html';
        return;
    }
}

// Setup Event Listeners
function setupEventListeners() {
    // Sidebar toggle
    document.getElementById('sidebarToggle').addEventListener('click', toggleSidebar);
    document.getElementById('mobileMenuBtn').addEventListener('click', toggleMobileSidebar);
    
    // Logout buttons
    document.getElementById('logoutBtn').addEventListener('click', logout);
    document.getElementById('headerLogoutBtn').addEventListener('click', logout);
    
    // User menu
    document.getElementById('userMenuBtn').addEventListener('click', toggleUserMenu);
    
    // Modal
    document.getElementById('modalClose').addEventListener('click', closeModal);
    document.getElementById('modalOkBtn').addEventListener('click', closeModal);
    
    // Click outside to close dropdowns
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.user-menu')) {
            closeUserMenu();
        }
    });
}

// Load User Data
async function loadUserData() {
    try {
        const userData = localStorage.getItem('user_data');
        if (userData) {
            currentUser = JSON.parse(userData);
        } else {
            // Fetch user data from API
            const response = await window.AuthSystem.apiCall('/auth/me');
            if (response && response.ok) {
                currentUser = await response.json();
                localStorage.setItem('user_data', JSON.stringify(currentUser));
            }
        }
        
        if (currentUser) {
            updateUserInfo();
            generateNavigation();
            loadDashboardContent();
        }
        
    } catch (error) {
        console.error('Error loading user data:', error);
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
    }
}

// Update User Info
function updateUserInfo() {
    const userName = `${currentUser.first_name} ${currentUser.last_name}`;
    const userRole = currentUser.role;
    
    document.getElementById('userName').textContent = userName;
    document.getElementById('userRole').textContent = getRoleDisplayName(userRole);
    document.getElementById('headerUserName').textContent = currentUser.first_name;
}

// Generate Navigation based on user role
function generateNavigation() {
    const nav = document.getElementById('sidebarNav');
    const role = currentUser.role;
    
    let navItems = [];
    
    // Common navigation items
    navItems.push({
        section: '‡∏´‡∏•‡∏±‡∏Å',
        items: [
            { id: 'overview', icon: 'üìä', text: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°', href: '#overview' },
            { id: 'profile', icon: 'üë§', text: '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', href: '#profile' }
        ]
    });
    
    // Role-specific navigation
    if (role === 'superadmin') {
        navItems.push({
            section: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
            items: [
                { id: 'admin-management', icon: 'üë•', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin', href: '#admin-management' },
                { id: 'user-management', icon: 'üë§', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', href: '#user-management' },
                { id: 'system-settings', icon: '‚öôÔ∏è', text: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö', href: '#system-settings' },
                { id: 'audit-logs', icon: 'üìã', text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', href: '#audit-logs' }
            ]
        });
    } else if (['admin1', 'admin2', 'admin3'].includes(role)) {
        navItems.push({
            section: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
            items: [
                { id: 'user-management', icon: 'üë§', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', href: '#user-management' },
                { id: 'reports', icon: 'üìä', text: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', href: '#reports' }
            ]
        });
    }
    
    // Generate HTML
    let navHTML = '';
    navItems.forEach(section => {
        navHTML += `
            <div class="nav-section">
                <div class="nav-section-title">${section.section}</div>
                ${section.items.map(item => `
                    <a href="${item.href}" class="nav-item" data-section="${item.id}">
                        <span class="nav-item-icon">${item.icon}</span>
                        <span class="nav-item-text">${item.text}</span>
                    </a>
                `).join('')}
            </div>
        `;
    });
    
    nav.innerHTML = navHTML;
    
    // Add click listeners to navigation items
    nav.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const section = this.dataset.section;
            navigateToSection(section);
        });
    });
}

// Navigate to Section
function navigateToSection(section) {
    currentSection = section;
    
    // Update active navigation
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-section="${section}"]`).classList.add('active');
    
    // Update breadcrumb
    updateBreadcrumb(section);
    
    // Load content
    loadSectionContent(section);
}

// Update Breadcrumb
function updateBreadcrumb(section) {
    const breadcrumb = document.getElementById('breadcrumb');
    const sectionNames = {
        'overview': '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°',
        'profile': '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
        'admin-management': '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin',
        'user-management': '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'system-settings': '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
        'audit-logs': '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        'reports': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
    };
    
    breadcrumb.innerHTML = `<span>Dashboard</span> <span>‚Ä∫</span> <span>${sectionNames[section] || section}</span>`;
}

// Load Dashboard Content
function loadDashboardContent() {
    // Default to overview
    navigateToSection('overview');
}

// Load Section Content
async function loadSectionContent(section) {
    const content = document.getElementById('content');
    
    // Show loading
    content.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner-large"></div>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        </div>
    `;
    
    try {
        switch (section) {
            case 'overview':
                await loadOverviewContent();
                break;
            case 'profile':
                await loadProfileContent();
                break;
            case 'admin-management':
                await loadAdminManagementContent();
                break;
            case 'user-management':
                await loadUserManagementContent();
                break;
            case 'system-settings':
                await loadSystemSettingsContent();
                break;
            case 'audit-logs':
                await loadAuditLogsContent();
                break;
            case 'reports':
                await loadReportsContent();
                break;
            default:
                content.innerHTML = '<div class="content-section"><h2>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h2></div>';
        }
    } catch (error) {
        console.error('Error loading section content:', error);
        content.innerHTML = `
            <div class="content-section">
                <h2>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
                <p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
            </div>
        `;
    }
}

// Load Overview Content
async function loadOverviewContent() {
    const content = document.getElementById('content');
    
    // Get statistics
    const stats = await getSystemStats();
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö</h1>
            <p class="dashboard-subtitle">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Authentication</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                    <div class="stat-icon" style="background: #dbeafe; color: #3b82f6;">üë•</div>
                </div>
                <div class="stat-value">${stats.totalUsers}</div>
                <div class="stat-change positive">+${stats.newUsersToday} ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</div>
                    <div class="stat-icon" style="background: #dcfce7; color: #059669;">üü¢</div>
                </div>
                <div class="stat-value">${stats.onlineUsers}</div>
                <div class="stat-change positive">+${stats.onlineChange}%</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                    <div class="stat-icon" style="background: #fef3c7; color: #d97706;">üîë</div>
                </div>
                <div class="stat-value">${stats.todayLogins}</div>
                <div class="stat-change ${stats.loginChange >= 0 ? 'positive' : 'negative'}">${stats.loginChange >= 0 ? '+' : ''}${stats.loginChange}%</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-title">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</div>
                    <div class="stat-icon" style="background: ${stats.securityScore >= 90 ? '#dcfce7' : '#fef3c7'}; color: ${stats.securityScore >= 90 ? '#059669' : '#d97706'};">üõ°Ô∏è</div>
                </div>
                <div class="stat-value">${stats.securityScore}%</div>
                <div class="stat-change ${stats.securityScore >= 90 ? 'positive' : 'negative'}">${stats.securityScore >= 90 ? '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢' : '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á'}</div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
                <div class="section-actions">
                    <button class="btn btn-secondary" onclick="refreshActivity()">üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
                </div>
            </div>
            <div id="recentActivity">
                ${generateRecentActivity(stats.recentActivity)}
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h2>
            </div>
            <div class="system-info">
                <p><strong>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:</strong> ${stats.systemVersion}</p>
                <p><strong>‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:</strong> ${stats.serverStatus}</p>
                <p><strong>‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ${stats.databaseStatus}</p>
                <p><strong>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> ${stats.lastUpdate}</p>
            </div>
        </div>
    `;
}

// Load Profile Content
async function loadProfileContent() {
    const content = document.getElementById('content');
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>
            <p class="dashboard-subtitle">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</p>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
                <div class="section-actions">
                    <button class="btn btn-primary" onclick="editProfile()">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                </div>
            </div>
            <div class="profile-info">
                <div class="profile-field">
                    <label>‡∏ä‡∏∑‡πà‡∏≠:</label>
                    <span>${currentUser.first_name}</span>
                </div>
                <div class="profile-field">
                    <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
                    <span>${currentUser.last_name}</span>
                </div>
                <div class="profile-field">
                    <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                    <span>${currentUser.email}</span>
                </div>
                <div class="profile-field">
                    <label>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</label>
                    <span>${getRoleDisplayName(currentUser.role)}</span>
                </div>
                <div class="profile-field">
                    <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
                    <span class="status-badge ${currentUser.is_active ? 'active' : 'inactive'}">
                        ${currentUser.is_active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                    </span>
                </div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
            </div>
            <form id="changePasswordForm" class="password-form">
                <div class="form-group">
                    <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</label>
                    <input type="password" id="currentPassword" required>
                </div>
                <div class="form-group">
                    <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</label>
                    <input type="password" id="newPassword" required>
                </div>
                <div class="form-group">
                    <label>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</label>
                    <input type="password" id="confirmPassword" required>
                </div>
                <button type="submit" class="btn btn-primary">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</button>
            </form>
        </div>
    `;
    
    // Add form listener
    document.getElementById('changePasswordForm').addEventListener('submit', handleChangePassword);
}

// Get System Stats
async function getSystemStats() {
    // Mock data for now - replace with actual API calls
    return {
        totalUsers: 1247,
        newUsersToday: 12,
        onlineUsers: 89,
        onlineChange: 15,
        todayLogins: 234,
        loginChange: 8,
        securityScore: 94,
        systemVersion: '1.0.0',
        serverStatus: '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
        databaseStatus: '‡∏õ‡∏Å‡∏ï‡∏¥',
        lastUpdate: '2025-01-31 10:30:00',
        recentActivity: [
            { user: 'admin1@example.com', action: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', time: '10:30' },
            { user: 'user@example.com', action: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', time: '10:25' },
            { user: 'admin2@example.com', action: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà', time: '10:20' }
        ]
    };
}

// Generate Recent Activity HTML
function generateRecentActivity(activities) {
    return activities.map(activity => `
        <div class="activity-item">
            <div class="activity-info">
                <strong>${activity.user}</strong> ${activity.action}
            </div>
            <div class="activity-time">${activity.time}</div>
        </div>
    `).join('');
}

// Get Role Display Name
function getRoleDisplayName(role) {
    const roleNames = {
        'superadmin': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
        'admin1': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö 1',
        'admin2': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö 2',
        'admin3': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö 3',
        'user': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
    };
    return roleNames[role] || role;
}

// Sidebar Functions
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('mainContent');
    
    sidebar.classList.toggle('collapsed');
    mainContent.classList.toggle('expanded');
}

function toggleMobileSidebar() {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('mobile-open');
}

// User Menu Functions
function toggleUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    userMenu.classList.toggle('open');
}

function closeUserMenu() {
    const userMenu = document.querySelector('.user-menu');
    userMenu.classList.remove('open');
}

// Modal Functions
function showModal(title, message) {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('modalMessage').textContent = message;
    document.getElementById('alertModal').classList.add('show');
}

function closeModal() {
    document.getElementById('alertModal').classList.remove('show');
}

// Logout Function
function logout() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        window.AuthSystem.clearLoginData();
        window.location.href = 'index.html';
    }
}

// Real-time Updates
function startRealTimeUpdates() {
    // Update time every second
    updateHeaderTime();
    setInterval(updateHeaderTime, 1000);
    
    // Update stats every 30 seconds
    setInterval(() => {
        if (currentSection === 'overview') {
            loadOverviewContent();
        }
    }, 30000);
}

function updateHeaderTime() {
    const now = new Date();
    const timeString = now.toLocaleString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    const headerTime = document.getElementById('headerTime');
    if (headerTime) {
        headerTime.textContent = timeString;
    }
}

// Load Admin Management Content
async function loadAdminManagementContent() {
    const content = document.getElementById('content');
    
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin</h1>
            <p class="dashboard-subtitle">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</p>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Admin</h2>
                <div class="section-actions">
                    <button class="btn btn-primary" onclick="showAddAdminModal()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin</button>
                    <button class="btn btn-secondary" onclick="refreshAdminList()">üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
                </div>
            </div>
            <div id="adminListContainer">
                <div class="loading-content">
                    <div class="loading-spinner-large"></div>
                    <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Admin...</p>
                </div>
            </div>
        </div>
        
        <div class="content-section">
            <div class="section-header">
                <h2 class="section-title">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Admin</h2>
            </div>
            <div class="admin-stats-grid">
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                        <div class="stat-icon" style="background: #dbeafe; color: #3b82f6;">üë•</div>
                    </div>
                    <div class="stat-value" id="totalAdmins">-</div>
                    <div class="stat-change">Admin1, Admin2, Admin3</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</div>
                        <div class="stat-icon" style="background: #dcfce7; color: #059669;">üü¢</div>
                    </div>
                    <div class="stat-value" id="onlineAdmins">-</div>
                    <div class="stat-change" id="onlineAdminsChange">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Admin ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</div>
                        <div class="stat-icon" style="background: #fef3c7; color: #d97706;">‚úÖ</div>
                    </div>
                    <div class="stat-value" id="activeAdmins">-</div>
                    <div class="stat-change" id="activeAdminsChange">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥</div>
                </div>
            </div>
        </div>
    `;
    
    // Add CSS for admin stats grid
    if (!document.getElementById('adminStatsCSS')) {
        const style = document.createElement('style');
        style.id = 'adminStatsCSS';
        style.textContent = `
            .admin-stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 20px;
            }
            
            .admin-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }
            
            .admin-table th,
            .admin-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e2e8f0;
            }
            
            .admin-table th {
                background: #f8fafc;
                font-weight: 600;
                color: #374151;
            }
            
            .admin-table tr:hover {
                background: #f8fafc;
            }
            
            .status-badge {
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 12px;
                font-weight: 500;
            }
            
            .status-badge.active {
                background: #dcfce7;
                color: #059669;
            }
            
            .status-badge.inactive {
                background: #fee2e2;
                color: #dc2626;
            }
            
            .admin-actions {
                display: flex;
                gap: 8px;
            }
            
            .btn-small {
                padding: 4px 8px;
                font-size: 12px;
                border-radius: 4px;
            }
            
            .btn-edit {
                background: #3b82f6;
                color: white;
                border: none;
                cursor: pointer;
            }
            
            .btn-delete {
                background: #ef4444;
                color: white;
                border: none;
                cursor: pointer;
            }
            
            .btn-edit:hover {
                background: #2563eb;
            }
            
            .btn-delete:hover {
                background: #dc2626;
            }
        `;
        document.head.appendChild(style);
    }
    
    // Load admin list
    await loadAdminList();
}

async function loadUserManagementContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>
            <p class="dashboard-subtitle">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</p>
        </div>
        <div class="content-section">
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...</p>
        </div>
    `;
}

async function loadSystemSettingsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h1>
            <p class="dashboard-subtitle">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</p>
        </div>
        <div class="content-section">
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...</p>
        </div>
    `;
}

async function loadAuditLogsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h1>
            <p class="dashboard-subtitle">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
        </div>
        <div class="content-section">
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...</p>
        </div>
    `;
}

async function loadReportsContent() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="dashboard-header">
            <h1 class="dashboard-title">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h1>
            <p class="dashboard-subtitle">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
        <div class="content-section">
            <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...</p>
        </div>
    `;
}

// Handle Change Password
async function handleChangePassword(event) {
    event.preventDefault();
    
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (newPassword !== confirmPassword) {
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
        return;
    }
    
    if (newPassword.length < 8) {
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall('/auth/change-password', {
            method: 'POST',
            body: JSON.stringify({
                old_password: currentPassword,
                new_password: newPassword
            })
        });
        
        if (response && response.ok) {
            showModal('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            document.getElementById('changePasswordForm').reset();
        } else {
            const data = await response.json();
            showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.detail || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        }
    } catch (error) {
        console.error('Change password error:', error);
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
    }
}

// Utility functions
function refreshActivity() {
    if (currentSection === 'overview') {
        loadOverviewContent();
    }
}

function editProfile() {
    showModal('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤');
}

// Admin Management Functions
async function loadAdminList() {
    try {
        const response = await window.AuthSystem.apiCall('/users/?role=admin');
        
        if (response && response.ok) {
            const admins = await response.json();
            displayAdminList(admins);
            updateAdminStats(admins);
        } else {
            // Use mock data if API fails
            const mockAdmins = [
                {
                    id: '1',
                    email: 'admin1@example.com',
                    first_name: 'Admin',
                    last_name: 'One',
                    role: 'admin1',
                    is_active: true,
                    created_at: '2025-01-01T00:00:00Z',
                    last_login: '2025-01-31T10:30:00Z'
                },
                {
                    id: '2',
                    email: 'admin2@example.com',
                    first_name: 'Admin',
                    last_name: 'Two',
                    role: 'admin2',
                    is_active: true,
                    created_at: '2025-01-01T00:00:00Z',
                    last_login: '2025-01-30T15:20:00Z'
                },
                {
                    id: '3',
                    email: 'admin3@example.com',
                    first_name: 'Admin',
                    last_name: 'Three',
                    role: 'admin3',
                    is_active: false,
                    created_at: '2025-01-01T00:00:00Z',
                    last_login: '2025-01-29T09:15:00Z'
                }
            ];
            displayAdminList(mockAdmins);
            updateAdminStats(mockAdmins);
        }
    } catch (error) {
        console.error('Error loading admin list:', error);
        document.getElementById('adminListContainer').innerHTML = `
            <div class="error-message">
                <p>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Admin ‡πÑ‡∏î‡πâ</p>
                <button class="btn btn-primary" onclick="loadAdminList()">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
            </div>
        `;
    }
}

function displayAdminList(admins) {
    const container = document.getElementById('adminListContainer');
    
    if (admins.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>‡πÑ‡∏°‡πà‡∏°‡∏µ Admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                <button class="btn btn-primary" onclick="showAddAdminModal()">‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡πÅ‡∏£‡∏Å</button>
            </div>
        `;
        return;
    }
    
    const tableHTML = `
        <table class="admin-table">
            <thead>
                <tr>
                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                    <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                    <th>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
                    <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
            </thead>
            <tbody>
                ${admins.map(admin => `
                    <tr>
                        <td>${admin.first_name} ${admin.last_name}</td>
                        <td>${admin.email}</td>
                        <td>${getRoleDisplayName(admin.role)}</td>
                        <td>
                            <span class="status-badge ${admin.is_active ? 'active' : 'inactive'}">
                                ${admin.is_active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                            </span>
                        </td>
                        <td>${formatDateTime(admin.last_login)}</td>
                        <td>
                            <div class="admin-actions">
                                <button class="btn-small btn-edit" onclick="editAdmin('${admin.id}')">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                <button class="btn-small btn-delete" onclick="deleteAdmin('${admin.id}', '${admin.email}')">‡∏•‡∏ö</button>
                                <button class="btn-small ${admin.is_active ? 'btn-delete' : 'btn-edit'}" 
                                        onclick="toggleAdminStatus('${admin.id}', ${admin.is_active})">
                                    ${admin.is_active ? '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
}

function updateAdminStats(admins) {
    const totalAdmins = admins.length;
    const activeAdmins = admins.filter(admin => admin.is_active).length;
    const onlineAdmins = admins.filter(admin => {
        if (!admin.last_login) return false;
        const lastLogin = new Date(admin.last_login);
        const now = new Date();
        const hoursDiff = (now - lastLogin) / (1000 * 60 * 60);
        return hoursDiff < 1; // Consider online if logged in within last hour
    }).length;
    
    document.getElementById('totalAdmins').textContent = totalAdmins;
    document.getElementById('activeAdmins').textContent = activeAdmins;
    document.getElementById('onlineAdmins').textContent = onlineAdmins;
    
    document.getElementById('activeAdminsChange').textContent = 
        activeAdmins === totalAdmins ? '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : `${totalAdmins - activeAdmins} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`;
    document.getElementById('onlineAdminsChange').textContent = 
        onlineAdmins > 0 ? `${onlineAdmins} ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
}

function formatDateTime(dateString) {
    if (!dateString) return '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
    
    const date = new Date(dateString);
    return date.toLocaleString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function refreshAdminList() {
    loadAdminList();
}

function showAddAdminModal() {
    const modalHTML = `
        <div class="modal show" id="addAdminModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡πÉ‡∏´‡∏°‡πà</h3>
                    <button class="modal-close" onclick="closeAddAdminModal()">√ó</button>
                </div>
                <div class="modal-body">
                    <form id="addAdminForm">
                        <div class="form-group">
                            <label>‡∏ä‡∏∑‡πà‡∏≠:</label>
                            <input type="text" id="adminFirstName" required>
                        </div>
                        <div class="form-group">
                            <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
                            <input type="text" id="adminLastName" required>
                        </div>
                        <div class="form-group">
                            <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                            <input type="email" id="adminEmail" required>
                        </div>
                        <div class="form-group">
                            <label>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</label>
                            <select id="adminRole" required>
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</option>
                                <option value="admin1">Admin 1</option>
                                <option value="admin2">Admin 2</option>
                                <option value="admin3">Admin 3</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</label>
                            <input type="password" id="adminPassword" required minlength="8">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeAddAdminModal()">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    <button class="btn btn-primary" onclick="submitAddAdmin()">‡πÄ‡∏û‡∏¥‡πà‡∏° Admin</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

function closeAddAdminModal() {
    const modal = document.getElementById('addAdminModal');
    if (modal) {
        modal.remove();
    }
}

async function submitAddAdmin() {
    const firstName = document.getElementById('adminFirstName').value;
    const lastName = document.getElementById('adminLastName').value;
    const email = document.getElementById('adminEmail').value;
    const role = document.getElementById('adminRole').value;
    const password = document.getElementById('adminPassword').value;
    
    if (!firstName || !lastName || !email || !role || !password) {
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall('/users/', {
            method: 'POST',
            body: JSON.stringify({
                first_name: firstName,
                last_name: lastName,
                email: email,
                role: role,
                password: password,
                is_active: true
            })
        });
        
        if (response && response.ok) {
            showModal('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            closeAddAdminModal();
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.detail || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡πÑ‡∏î‡πâ');
        }
    } catch (error) {
        console.error('Error adding admin:', error);
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Admin');
    }
}

async function editAdmin(adminId) {
    showModal('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Admin ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤');
}

async function deleteAdmin(adminId, adminEmail) {
    if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Admin ${adminEmail} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall(`/users/${adminId}`, {
            method: 'DELETE'
        });
        
        if (response && response.ok) {
            showModal('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö Admin ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.detail || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Admin ‡πÑ‡∏î‡πâ');
        }
    } catch (error) {
        console.error('Error deleting admin:', error);
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Admin');
    }
}

async function toggleAdminStatus(adminId, currentStatus) {
    const action = currentStatus ? '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    
    if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${action} Admin ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
        return;
    }
    
    try {
        const response = await window.AuthSystem.apiCall(`/users/${adminId}`, {
            method: 'PUT',
            body: JSON.stringify({
                is_active: !currentStatus
            })
        });
        
        if (response && response.ok) {
            showModal('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `${action} Admin ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
            loadAdminList();
        } else {
            const data = await response.json();
            showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.detail || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ${action} Admin ‡πÑ‡∏î‡πâ`);
        }
    } catch (error) {
        console.error('Error toggling admin status:', error);
        showModal('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${action} Admin`);
    }
}

